<!-- Панель Галерея -->
<el-tab-pane>
                <template #label>
                    <span class="custom-tabs-label">
                      <el-icon><Picture/></el-icon>
                      <span> Галерея</span>
                    </span>
                </template>
                <div class="mt-5 p-5 bg-white rounded-lg">
                    <h2 class="font-medium text-lg mb-3">Галерея:</h2>
                    <el-upload
                        v-model:file-list="fileList"
                        :action="add"
                        list-type="picture-card"
                        :on-preview="handlePictureCardPreview"
                        :on-remove="handleRemove"
                        :headers="{'X-CSRF-TOKEN': csrf}"
                    >
                        <el-icon>
                            <Plus/>
                        </el-icon>
                    </el-upload>
                    <el-dialog v-model="dialogGallery" width="80%">
                        <div class="flex">
                            <div style="width: 80%" class="grid">
                                <img w-full :src="dialogImageUrl" alt="Preview Image" class="mx-auto"/>
                            </div>
                            <div class="bg-gray-100 p-2 border border-gray-300" style="width: 20%">
                                <el-form :model="form" label-width="auto">
                                    <el-form-item label="ID фото">
                                        <el-input v-model="form.photo_id" readonly/>
                                    </el-form-item>
                                    <el-form-item label="Alt для фото" label-position="top">
                                        <el-input v-model="form.alt" placeholder="Напишите Alt для SEO"/>
                                    </el-form-item>
                                    <el-form-item label="Заголовок" label-position="top">
                                        <el-input v-model="form.title" placeholder="Заголовок"/>
                                    </el-form-item>
                                    <el-form-item label="Описание" label-position="top">
                                        <el-input v-model="form.description" placeholder="Описание" type="textarea"
                                                  :rows="3"/>
                                    </el-form-item>
                                    <el-button type="primary" @click="onSubmit">Сохранить</el-button>
                                    <span v-if="dialogSave" class="text-lime-500 text-sm ml-3">Сохранено</span>
                                </el-form>
                                <div class="mt-5">
                                    <el-input v-model="dialogImageUrl" readonly/>
                                    <el-button id="copy_buffer" type="success" class="text-sm mt-2" @click="copyBuffer"
                                               plain>Скопировать Url
                                    </el-button>
                                    <span v-if="dialogCopy" class="text-lime-500 text-sm ml-3">Скопировано</span>
                                </div>
                            </div>
                        </div>
                    </el-dialog>
                </div>
            </el-tab-pane>


const dialogImageUrl = ref('')
const dialogGallery = ref(false)
const dialogCopy = ref(false)
const dialogSave = ref(false)

const form = reactive({
    photo_id: null,
    alt: null,
    title: null,
    description: null,
})

const handlePictureCardPreview: UploadProps['onPreview'] = (uploadFile) => {
    dialogImageUrl.value = uploadFile.url!
    form.photo_id = uploadFile.id;
    form.alt = uploadFile.alt;
    form.title = uploadFile.title;
    form.description = uploadFile.description;
    dialogGallery.value = true
}

function copyBuffer(val) {
    dialogCopy.value = true;
    setTimeout(() => {
        dialogCopy.value = false;
    }, 2000);
    navigator.clipboard.writeText(dialogImageUrl.value);
}

function onSubmit() {
    dialogSave.value = true;
    setTimeout(() => {
        dialogSave.value = false;
    }, 2000);
    router.post(props.set, form);
}


    gallery: Array,
    add: String,
    del: String,
    set: String,


    const fileList = ref<UploadUserFile[]>(props.gallery);


    const handleRemove: UploadProps['onRemove'] = (uploadFile, uploadFiles) => {
        if (uploadFile.id !== undefined) router.post(props.del, {photo_id: uploadFile.id});
    }
