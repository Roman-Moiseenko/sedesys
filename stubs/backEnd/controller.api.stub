<?php

namespace DummyRootNamespaceModules\DummySingular\Controllers;

use DummyRootNamespaceHttp\Controllers\Controller;
use DummyRootNamespaceModules\DummySingular\Entity\DummyEntitySingular;
use DummyRootNamespaceModules\DummySingular\Requests\DummyEntitySingularRequest;
use DummyRootNamespaceModules\DummySingular\Repository\DummyEntitySingularRepository;
use DummyRootNamespaceModules\DummySingular\Service\DummyEntitySingularService;
use Illuminate\Http\Request;
use Inertia\Inertia;

class DummyEntitySingularController extends Controller
{

    private DummyEntitySingularService $service;
    private DummyEntitySingularRepository $repository;

    public function __construct(DummyEntitySingularService $service, DummyEntitySingularRepository $repository)
    {
        $this->service = $service;
        $this->repository = $repository;
    }


    public function index(Request $request)
    {
        $dummyVariableEntityPlural = $this->repository->getIndex($request, $filters);

        return Inertia::render('DummySingular/DummyEntitySingular/Index', [
                'dummyVariableEntityPlural' => $dummyVariableEntityPlural,
                'filters' => $filters,
            ]
        );
    }

    public function create(Request $request)
    {
        return Inertia::render('DummySingular/DummyEntitySingular/Create', [
            'route' => route('admin.dummyVariableSingular.dummyVariableEntitySingular.store'),
        ]);
    }

    public function store(DummyEntitySingularRequest $request)
    {
        $request->validated();
        $dummyVariableEntitySingular = $this->service->create($request);
        return redirect()
            ->route('admin.dummyVariableSingular.dummyVariableEntitySingular.show', $dummyVariableEntitySingular)
            ->with('success', 'Новый dummyVariableEntitySingular добавлен');
    }

    public function show(DummyEntitySingular $dummyVariableEntitySingular)
    {
        $dummyVariableEntitySingular = $this->repository->DummyEntitySingularWithToArray($dummyVariableEntitySingular);

        return Inertia::render('DummySingular/DummyEntitySingular/Show', [
                'dummyVariableEntitySingular' => $dummyVariableEntitySingular,
                'edit' => route('admin.dummyVariableSingular.dummyVariableEntitySingular.edit', $dummyVariableEntitySingular),
            ]
        );
    }

    public function edit(DummyEntitySingular $dummyVariableEntitySingular)
    {
        $dummyVariableEntitySingular = $this->repository->DummyEntitySingularToArray($dummyVariableEntitySingular);

        return Inertia::render('DummySingular/DummyEntitySingular/Edit', [
            'dummyVariableEntitySingular' => $dummyVariableEntitySingular,
            'route' => route('admin.dummyVariableSingular.dummyVariableEntitySingular.update', $dummyVariableEntitySingular),
        ]);
    }

    public function update(DummyEntitySingularRequest $request, DummyEntitySingular $dummyVariableEntitySingular)
    {
        $request->validated();
        $this->service->update($dummyVariableEntitySingular, $request);

        if ($request->boolean('close')) {
            return redirect()
                ->route('admin.dummyVariableSingular.dummyVariableEntitySingular.show', $dummyVariableEntitySingular)
                ->with('success', 'Сохранение прошло успешно');
        } else {
            return redirect()->back()->with('success', 'Сохранение прошло успешно');
        }
    }

    public function destroy(DummyEntitySingular $dummyVariableEntitySingular)
    {
        $this->service->destroy($dummyVariableEntitySingular);

        return redirect()->back()->with('success', 'Удаление прошло успешно');
    }
}
