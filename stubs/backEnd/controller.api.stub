<?php

namespace DummyRootNamespaceModules\DummySingular\Controllers;

use DummyRootNamespaceHttp\Controllers\Controller;
use DummyRootNamespaceModules\DummySingular\Entity\DummyEntitySingular;
use DummyRootNamespaceModules\DummySingular\Requests\DummyEntitySingularRequest;
use DummyRootNamespaceModules\DummySingular\Resources\DummyEntitySingularResource;
use DummyRootNamespaceModules\DummySingular\Service\DummyEntitySingularService;
use Exception;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Http\JsonResponse;
use Illuminate\Http\Request;
use Illuminate\Http\Resources\Json\AnonymousResourceCollection;

class DummyEntitySingularController extends Controller
{

    private DummyEntitySingularService $service;

    public function __construct(DummyEntitySingularService $service)
    {
        $this->service = $service;
    }

    /**
     * @param Request $request
     * @return AnonymousResourceCollection
     */
    public function index(Request $request)
    {
        [$column, $order] = explode(',', $request->input('sortBy', 'id,asc'));
        $pageSize = (int) $request->input('pageSize', 10);

        $resource = DummyEntitySingular::query()
            ->when($request->filled('search'), function (Builder $q) use ($request) {
                $q->where(DummyEntitySingular::COLUMN_NAME, 'like', '%'.$request->search.'%');
            })
            ->orderBy($column, $order)->paginate($pageSize);

        return DummyEntitySingularResource::collection($resource);
    }

    /**
     * Store a newly created resource in storage.
     * @param DummyEntitySingularRequest $request
     * @return JsonResponse
     */
    public function store(DummyEntitySingularRequest $request)
    {
        $data = $request->validated();
        $dummyVariableEntitySingular = new DummyEntitySingular($data);
        $dummyVariableEntitySingular->save();

        return response()->json([
            'type' => self::RESPONSE_TYPE_SUCCESS,
            'message' => 'Successfully created',
        ]);
    }

    /**
     * Display the specified resource.
     *
     * @param DummyEntitySingular $dummyVariableEntitySingular
     * @return DummyEntitySingularResource
     */
    public function show(DummyEntitySingular $dummyVariableEntitySingular)
    {
        return new DummyEntitySingularResource($dummyVariableEntitySingular);
    }

    /**
     * Update the specified resource in storage.
     *
     * @param DummyEntitySingularRequest $request
     * @param DummyEntitySingular $dummyVariableEntitySingular
     * @return JsonResponse
     */
    public function update(DummyEntitySingularRequest $request, DummyEntitySingular $dummyVariableEntitySingular)
    {


        $data = $request->validated();

        $this->service->update($dummyVariableEntitySingular, $request);

        return response()->json([
            'type' => self::RESPONSE_TYPE_SUCCESS,
            'message' => 'Successfully updated',
        ]);
    }

    /**
     * @param DummyEntitySingular $dummyVariableEntitySingular
     * @return JsonResponse
     * @throws Exception
     */
    public function destroy(DummyEntitySingular $dummyVariableEntitySingular)
    {
        $this->service->delete($dummyVariableEntitySingular);

        return response()->json([
            'type' => self::RESPONSE_TYPE_SUCCESS,
            'message' => 'Successfully deleted',
        ]);
    }
}
